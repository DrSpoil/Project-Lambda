#version 400 core
 
in vec2 pass_coordTexture;
in vec3 surfaceNormal;
in vec3 versLumiereVecteur;
in vec3 versCameraVecteur;
in float visibilite;

out vec4 out_Couleur;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 couleurLumiere;
uniform float coucheBrillance;
uniform float reflectivite;
uniform vec3 couleurCiel;

void main(void){
	
	vec4 blendMapCouleur = texture(blendMap,pass_coordTexture);
	
	float backTextureAmount = 1 - (blendMapCouleur.r + blendMapCouleur.g + blendMapCouleur.b);
	vec2  tiledCoords = pass_coordTexture * 40.0;
	vec4  backgroundTextureCouleur = texture(backgroundTexture,tiledCoords) * backTextureAmount;
	vec4  rTextureCouleur = texture(rTexture,tiledCoords) * blendMapCouleur.r;
	vec4  gTextureCouleur = texture(gTexture,tiledCoords) * blendMapCouleur.g;
	vec4  bTextureCouleur = texture(bTexture,tiledCoords) * blendMapCouleur.b;
	
	vec4 couleurTotal = backgroundTextureCouleur + rTextureCouleur + gTextureCouleur + bTextureCouleur;


	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLumiere = normalize(versLumiereVecteur);
	
	float nDot1 = dot(unitNormal,unitLumiere);
	float brightness = max(nDot1,0.2);
	vec3 diffuse = brightness * couleurLumiere;
	
	vec3 unitVecteurVersCamera = normalize(versCameraVecteur);
	vec3 directionLumiere = -unitLumiere;
	vec3 reflechitDirectionLumiere = reflect(directionLumiere,unitNormal);
	
	float facteurSpeculaire = dot(reflechitDirectionLumiere,unitVecteurVersCamera);
	facteurSpeculaire = max(facteurSpeculaire,0.0);
	float coucheFacteur = pow(facteurSpeculaire,coucheBrillance);
	vec3 finalSpeculaire = coucheFacteur * reflectivite *couleurLumiere;
	
	out_Couleur = vec4(diffuse,1.0) * couleurTotal + vec4(finalSpeculaire,1.0);
	out_Couleur = mix(vec4(couleurCiel,1.0),out_Couleur,visibilite);
	
}