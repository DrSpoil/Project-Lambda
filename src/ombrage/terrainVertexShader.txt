#version 400 core

in vec3 position;
in vec2 coordTexture;
in vec3 normal;

out vec2 pass_coordTexture;
out vec3 surfaceNormal;
out vec3 versLumiereVecteur;
out vec3 versCameraVecteur;
out float visibilite;

uniform mat4 transformationMatrice;
uniform mat4 matriceProjection;
uniform mat4 matriceVision;
uniform vec3 positionLumiere;

const float densite = 0.013;
const float gradient = 1.5;

 void main(void){
 	
 	vec4 positionMonde = transformationMatrice * vec4(position,1.0);
 	vec4 positionRelativeACamera = matriceVision * positionMonde;
 	gl_Position =  matriceProjection * positionRelativeACamera;
 	pass_coordTexture = coordTexture;
 	
 	surfaceNormal = (transformationMatrice * vec4(normal,0.0)).xyz;
 	versLumiereVecteur = positionLumiere - positionMonde.xyz;
 	versCameraVecteur = (inverse(matriceVision) * vec4(0.0,0.0,0.0,1.0)).xyz - positionMonde.xyz;
 	
 	float distance = length(positionRelativeACamera.xyz);
 	visibilite = exp(-pow((distance*densite),gradient));
 	visibilite = clamp(visibilite,0.0,1.0);
 	
 }